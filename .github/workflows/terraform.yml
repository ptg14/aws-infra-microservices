name: 'Terraform AWS Infrastructure'

on:
  push:
    branches: [ "main" ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  pull-requests: write

env:
  AWS_REGION: 'us-east-1'
  TERRAFORM_VERSION: '1.6.6'
  PROJECT_NAME: 'microservices'
  ENVIRONMENT_NAME: 'production'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate

    - name: Run Checkov scan
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: terraform
        framework: terraform
        output_format: sarif
        output_file_path: reports/results.sarif
        quiet: true
        soft_fail: true
        skip_check: CKV_AWS_79,CKV_AWS_20,CKV_AWS_23

    - name: Upload Checkov results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: reports/results.sarif

    - name: Checkov Summary
      if: always()
      run: |
        echo "## Checkov Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "Security scan completed. Check the Security tab for detailed results." >> $GITHUB_STEP_SUMMARY

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -var-file="terraform.tfvars" -no-color -out=tfplan 2>&1 | tee plan_output.txt
        echo "plan_output<<EOF" >> $GITHUB_OUTPUT
        cat plan_output.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå \`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ \`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform
          ${{ steps.plan.outputs.plan_output }}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve tfplan

    - name: Terraform Output
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "## Terraform Outputs" >> $GITHUB_STEP_SUMMARY
        terraform output -no-color >> $GITHUB_STEP_SUMMARY

    - name: Save Terraform Plan
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: terraform/tfplan
        retention-days: 5

  security-scan:
    name: 'Additional Security Scan'
    runs-on: ubuntu-latest
    needs: terraform
    if: always()

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run TFSec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: terraform
        soft_fail: true

    - name: Run Terraform Compliance
      continue-on-error: true
      run: |
        pip install terraform-compliance
        echo "Running terraform-compliance checks..."
        # Add compliance checks if needed