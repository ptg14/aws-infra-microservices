name: 'Terraform AWS Infrastructure'

on:
  push:
    branches: [ "main" ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  pull-requests: write

env:
  AWS_REGION: 'us-east-1'
  TERRAFORM_VERSION: '1.6.6'
  PROJECT_NAME: 'microservices'
  ENVIRONMENT_NAME: 'production'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        # Remove audience parameter for traditional IAM user credentials
        # audience: sts.amazonaws.com

    - name: Verify AWS credentials
      run: |
        echo "Testing AWS credentials..."
        echo "AWS CLI version:"
        aws --version
        echo "Attempting to get caller identity..."
        aws sts get-caller-identity || echo "Failed to authenticate with AWS"

    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -recursive

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate

    - name: Install Checkov
      run: |
        echo "Installing Checkov..."
        pip install checkov
        checkov --version

    - name: Run Checkov
      id: checkov
      run: |
        echo "Creating reports directory..."
        mkdir -p reports

        echo "Running Checkov scan..."
        checkov -d . \
          --skip-check CKV_AWS_79,CKV_AWS_20,CKV_AWS_23,CKV_AWS_260,CKV_AWS_88,CKV_AWS_130,CKV2_AWS_11,CKV2_AWS_41 \
          --soft-fail \
          --output cli \
          --output json \
          --output-file-path reports \
          --download-external-modules true \
          --framework terraform \
          --quiet

        echo "Scan completed. Checking results..."
        ls -la reports/

        # Ki·ªÉm tra v√† hi·ªÉn th·ªã n·ªôi dung file results
        if [ -f "reports/results_json.json" ]; then
          echo "‚úÖ JSON results file found"
          echo "File size: $(du -h reports/results_json.json)"
        else
          echo "‚ùå JSON results file not found!"
          echo "Available files in reports:"
          find reports -type f -name "*" 2>/dev/null || echo "No files in reports directory"
        fi

        if [ -f "reports/results_cli.txt" ]; then
          echo "‚úÖ CLI results file found"
        else
          echo "‚ùå CLI results file not found!"
        fi
      continue-on-error: true

    - name: Parse Checkov JSON Results
      id: parse_checkov
      working-directory: .  # Override working directory to access reports from root
      run: |
        echo "Current directory: $(pwd)"
        echo "Looking for results files..."
        find . -name "results_*.json" -o -name "results_*.txt" || echo "No result files found"

        # T√¨m file JSON results ·ªü multiple locations
        JSON_FILE=""
        if [ -f "reports/results_json.json" ]; then
          JSON_FILE="reports/results_json.json"
        elif [ -f "terraform/reports/results_json.json" ]; then
          JSON_FILE="terraform/reports/results_json.json"
        fi

        if [ ! -z "$JSON_FILE" ]; then
          echo "Found JSON file at: $JSON_FILE"
          echo "JSON_EXISTS=true" >> $GITHUB_ENV
          echo "JSON_PATH=$JSON_FILE" >> $GITHUB_ENV

          # Parse JSON results
          PASSED_CHECKS=$(jq -r '.summary.passed' "$JSON_FILE" 2>/dev/null || echo "0")
          FAILED_CHECKS=$(jq -r '.summary.failed' "$JSON_FILE" 2>/dev/null || echo "0")
          SKIPPED_CHECKS=$(jq -r '.summary.skipped' "$JSON_FILE" 2>/dev/null || echo "0")

          echo "PASSED_CHECKS=$PASSED_CHECKS" >> $GITHUB_ENV
          echo "FAILED_CHECKS=$FAILED_CHECKS" >> $GITHUB_ENV
          echo "SKIPPED_CHECKS=$SKIPPED_CHECKS" >> $GITHUB_ENV

          echo "Checkov Results Summary:"
          echo "‚úÖ Passed: $PASSED_CHECKS"
          echo "‚ùå Failed: $FAILED_CHECKS"
          echo "‚è≠Ô∏è Skipped: $SKIPPED_CHECKS"
        else
          echo "JSON_EXISTS=false" >> $GITHUB_ENV
          echo "No JSON results file found"
        fi

    - name: Checkov Summary
      if: always()
      working-directory: .  # Override working directory to access files from root
      run: |
        echo "## Checkov Security Scan Results" >> $GITHUB_STEP_SUMMARY

        if [ "${{ env.JSON_EXISTS }}" == "true" ]; then
          echo "‚úÖ Security scan completed successfully." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Passed**: ${{ env.PASSED_CHECKS }}" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ùå **Failed**: ${{ env.FAILED_CHECKS }}" >> $GITHUB_STEP_SUMMARY
          echo "- ‚è≠Ô∏è **Skipped**: ${{ env.SKIPPED_CHECKS }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # T√¨m file JSON ·ªü ƒë√∫ng location
          JSON_FILE=""
          if [ -f "terraform/reports/results_json.json" ]; then
            JSON_FILE="terraform/reports/results_json.json"
          elif [ -f "reports/results_json.json" ]; then
            JSON_FILE="reports/results_json.json"
          fi

          # Show failed checks details if any
          if [ "${{ env.FAILED_CHECKS }}" != "0" ] && [ ! -z "$JSON_FILE" ]; then
            echo "### Failed Checks Details" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            jq -r '.results.failed_checks[]? | "- " + .check_id + ": " + .check_name + " (" + .file_path + ")"' "$JSON_FILE" | head -10 >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "Could not parse failed checks" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

            if [ "${{ env.FAILED_CHECKS }}" -gt "10" ]; then
              echo "*... and $((${{ env.FAILED_CHECKS }} - 10)) more failed checks. Check the full report for details.*" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        else
          echo "‚ö†Ô∏è Security scan completed but no JSON results file was generated." >> $GITHUB_STEP_SUMMARY
        fi

        # Show CLI output summary if available
        CLI_FILE=""
        if [ -f "terraform/reports/results_cli.txt" ]; then
          CLI_FILE="terraform/reports/results_cli.txt"
        elif [ -f "reports/results_cli.txt" ]; then
          CLI_FILE="reports/results_cli.txt"
        fi

        if [ ! -z "$CLI_FILE" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### CLI Output Summary" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          tail -15 "$CLI_FILE" >> $GITHUB_STEP_SUMMARY || echo "Could not read CLI results file" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload Checkov JSON Results
      if: env.JSON_EXISTS == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: checkov-results
        path: terraform/reports/
        retention-days: 30

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -var-file="terraform.tfvars" -no-color -out=tfplan 2>&1 | tee plan_output.txt
        echo "plan_output<<EOF" >> $GITHUB_OUTPUT
        cat plan_output.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå \`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ \`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform
          ${{ steps.plan.outputs.plan_output }}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve tfplan

    - name: Terraform Output
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "## Terraform Outputs" >> $GITHUB_STEP_SUMMARY
        terraform output -no-color >> $GITHUB_STEP_SUMMARY

    - name: Save Terraform Plan
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: terraform/tfplan
        retention-days: 5

  security-scan:
    name: 'Additional Security Scan'
    runs-on: ubuntu-latest
    needs: terraform
    if: always()

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run TFSec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: terraform
        soft_fail: true

    - name: Run Terraform Compliance
      continue-on-error: true
      run: |
        pip install terraform-compliance
        echo "Running terraform-compliance checks..."
        # Add compliance checks if needed
