pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
        DOCKER_IMAGE = 'yourdockerusername/microservice-app'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        SONARQUBE_TOKEN = credentials('sonarqube-token')
        AWS_REGION = 'us-east-1'
    }

    tools {
        maven 'Maven-3.8.0'  // Configure in Global Tool Configuration
        jdk 'JDK-11'         // Configure in Global Tool Configuration
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    env.GIT_COMMIT_SHORT = sh(
                        script: "git rev-parse --short HEAD",
                        returnStdout: true
                    ).trim()
                }
            }
        }

        stage('Build Application') {
            steps {
                sh '''
                    echo "Building Java application..."
                    # If you have Java app, uncomment below:
                    # mvn clean compile -DskipTests

                    # For now, create dummy artifact
                    mkdir -p target
                    echo "Dummy application JAR" > target/app.jar
                '''
            }
        }

        stage('Unit Tests') {
            steps {
                sh '''
                    echo "Running unit tests..."
                    # mvn test
                    # For demo, create test results
                    mkdir -p target/surefire-reports
                    echo '<?xml version="1.0" encoding="UTF-8"?>
                    <testsuite name="DemoTest" tests="1" failures="0" errors="0">
                        <testcase name="testSuccess" classname="com.example.DemoTest"/>
                    </testsuite>' > target/surefire-reports/TEST-DemoTest.xml
                '''
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'SonarQube Scanner'
                    withSonarQubeEnv('SonarQube') {
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=microservices-app \
                                -Dsonar.projectName='Microservices Application' \
                                -Dsonar.projectVersion=1.0 \
                                -Dsonar.sources=. \
                                -Dsonar.language=java \
                                -Dsonar.sourceEncoding=UTF-8 \
                                -Dsonar.login=${SONARQUBE_TOKEN}
                        """
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    script {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Create Dockerfile if not exists
                    writeFile file: 'Dockerfile', text: '''
FROM openjdk:11-jre-slim
WORKDIR /app
COPY target/app.jar app.jar
EXPOSE 8080
CMD ["java", "-jar", "app.jar"]
'''

                    sh """
                        docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                        docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                    """
                }
            }
        }

        stage('Security Scan with Trivy') {
            steps {
                script {
                    sh '''
                        # Install Trivy if not present
                        if ! command -v trivy &> /dev/null; then
                            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
                        fi

                        # Scan Docker image for vulnerabilities
                        trivy image --severity HIGH,CRITICAL --format json --output trivy-report.json ${DOCKER_IMAGE}:${DOCKER_TAG}

                        # Display results
                        trivy image --severity HIGH,CRITICAL ${DOCKER_IMAGE}:${DOCKER_TAG}
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'trivy-report.json', fingerprint: true
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                sh """
                    echo ${DOCKER_HUB_CREDENTIALS_PSW} | docker login -u ${DOCKER_HUB_CREDENTIALS_USR} --password-stdin
                    docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                    docker push ${DOCKER_IMAGE}:latest
                """
            }
        }

        stage('Deploy to Kubernetes') {
            when {
                branch 'main'
            }
            steps {
                script {
                    // Update Kubernetes manifests with new image tag
                    sh """
                        sed -i 's|image: ${DOCKER_IMAGE}:[^ ]*|image: ${DOCKER_IMAGE}:${DOCKER_TAG}|' kubernetes/deployment.yaml
                    """

                    // Apply Kubernetes manifests
                    withKubeConfig([credentialsId: 'kubernetes-config']) {
                        sh """
                            kubectl apply -f kubernetes/deployment.yaml
                            kubectl apply -f kubernetes/service.yaml

                            # Wait for deployment to complete
                            kubectl rollout status deployment/microservice-app --timeout=300s

                            # Get service details
                            kubectl get services microservice-app
                        """
                    }
                }
            }
        }

        stage('Deploy to AWS ECS') {
            when {
                branch 'develop'
            }
            steps {
                script {
                    withAWS(credentials: 'aws-credentials', region: env.AWS_REGION) {
                        sh """
                            # Update ECS service with new image
                            aws ecs update-service \
                                --cluster microservices-cluster \
                                --service microservice-app \
                                --force-new-deployment
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up
            sh '''
                docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true
                docker rmi ${DOCKER_IMAGE}:latest || true
                docker system prune -f
            '''

            // Archive artifacts
            archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true, allowEmptyArchive: true

            // Publish test results
            publishHTML([
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'target/site/jacoco',
                reportFiles: 'index.html',
                reportName: 'Code Coverage Report'
            ])
        }

        success {
            echo '✅ Pipeline completed successfully!'
            slackSend(
                channel: '#deployments',
                color: 'good',
                message: "✅ Deployment successful: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
            )
        }

        failure {
            echo '❌ Pipeline failed!'
            slackSend(
                channel: '#deployments',
                color: 'danger',
                message: "❌ Deployment failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
            )
        }

        unstable {
            echo '⚠️ Pipeline is unstable!'
        }
    }
}